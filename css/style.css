/*  style.css - Complete CSS for FPS Game UI and Effects */

body {
    margin: 0;
    overflow: hidden; /* Prevent scrollbars */
    font-family: sans-serif;
    background-color: #222; /* Dark background */
    color: #eee; /* Light text color */
    user-select: none; /* Prevent text selection */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    animation: none; /* Reset damageFlash if applied */
}

/* Game Canvas Container */
#gameCanvas {
    display: block; /* Ensure canvas takes full available space */
    width: 100vw;
    height: 100vh;
    cursor: none; /* Hide default cursor in game */
}

/* Generic UI Container Styling */
.ui-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: none; /* Hidden by default */
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent overlay */
    z-index: 100; /* Ensure on top */
    color: white;
    text-align: center;
}

.ui-screen.show {
    display: flex; /* Show when 'show' class is added */
}

.ui-screen h1 {
    font-size: 2.5em;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
}

.ui-screen p {
    font-size: 1.2em;
    margin-bottom: 30px;
    opacity: 0.8;
}

.ui-button {
    padding: 12px 25px;
    font-size: 1.1em;
    background-color: #555;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s ease-out, transform 0.1s ease-out;
    margin: 10px;
    box-shadow: 2px 2px 3px rgba(0, 0, 0, 0.5);
     touch-action: manipulation; /* Improve mobile responsiveness */
}

.ui-button:hover {
    background-color: #777;
}

.ui-button:active {
    background-color: #444;
    transform: scale(0.95);
}

.ui-button.primary {
    background-color: #007bff; /* Example primary color */
}

.ui-button.primary:hover {
    background-color: #0095ff;
}


/* Start Screen Styles */
#startScreen {
    /* Inherits from .ui-screen */
}


/* Pause Screen Styles */
#pauseScreen {
    /* Inherits from .ui-screen */
}

#pauseScreen h1 {
    color: #ddd; /* Slightly lighter text */
}


/* Game Over Screen Styles */
#gameOverScreen {
    /* Inherits from .ui-screen */
}

#gameOverScreen h1 {
    color: #ff6f61; /* Example game over color */
}

#gameOverScreen p#finalScore {
    font-size: 1.5em;
    font-weight: bold;
    margin-bottom: 25px;
}


/* Settings Screen Styles */
#settingsScreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: none; /* Hidden by default */
    background-color: rgba(0, 0, 0, 0.9); /* Darker overlay */
    z-index: 110; /* Above other UI */
    color: white;
    padding: 30px;
    overflow-y: auto; /* Allow scrolling if content overflows */
    box-sizing: border-box; /* Include padding in width/height */
}

#settingsScreen.show {
    display: block; /* Show when 'show' class is added */
}

#settingsScreen h2 {
    margin-top: 0;
    margin-bottom: 20px;
    font-size: 2em;
    text-align: center;
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.7);
}

.settings-group {
    margin-bottom: 25px;
    padding: 15px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    background-color: rgba(0,0,0,0.2);
}

.settings-group h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1.4em;
    color: #eee;
}

.setting-row {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
}

.setting-label {
    flex: 0 0 180px; /* Fixed width for labels */
    text-align: right;
    padding-right: 15px;
    font-weight: bold;
    opacity: 0.9;
}

.setting-control {
    flex: 1; /* Take remaining space */
}

select, input[type="range"], input[type="checkbox"], input[type="text"] {
    padding: 8px 12px;
    border-radius: 4px;
    border: 1px solid #444;
    background-color: #333;
    color: white;
    font-size: 1em;
    min-width: 150px;
    box-sizing: border-box; /* Ensure padding/border within width */
}

select {
    cursor: pointer;
}

input[type="range"] {
    width: 100%;
    cursor: pointer;
    -webkit-appearance: none; /* Override default styles */
    appearance: none;
    background: transparent; /* Needed to override track color */
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background-color: #eee;
    cursor: pointer;
    border-radius: 50%;
    border: none;
    box-shadow: 0 0 2px rgba(0,0,0,0.8);
}

input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background-color: #eee;
    cursor: pointer;
    border-radius: 50%;
    border: none;
    box-shadow: 0 0 2px rgba(0,0,0,0.8);
}

input[type="range"]::-webkit-slider-runnable-track {
    background-color: #555;
    height: 6px;
    border-radius: 3px;
    cursor: pointer;
}

input[type="range"]::-moz-range-track {
    background-color: #555;
    height: 6px;
    border-radius: 3px;
    cursor: pointer;
}


input[type="checkbox"] {
    min-width: auto; /* Reset min-width */
    width: 20px;
    height: 20px;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    background-color: #333;
    border: 1px solid #444;
    border-radius: 3px;
    position: relative;
}

input[type="checkbox"]:checked {
    background-color: #007bff;
    border-color: #007bff;
}

input[type="checkbox"]:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.5); /* Focus ring effect */
}


input[type="checkbox"]:checked::before {
    content: '\2713'; /* Checkmark character */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 16px;
    color: white;
}

.keybind-input {
    font-family: monospace; /* Monospace font for key names */
    text-align: center;
    min-width: 80px;
}

.setting-value-display {
    margin-left: 10px;
    font-size: 0.9em;
    opacity: 0.7;
    width: 40px; /* Fixed width for value display */
    display: inline-block;
    text-align: right;
}

.setting-row.disabled {
    opacity: 0.5;
    pointer-events: none; /* Make controls non-interactive */
    user-select: none;
}

.setting-row.disabled .setting-label {
    opacity: 0.4; /* Dim label further */
}


#closeSettingsButton {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    color: white;
    font-size: 1.5em;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s ease-out;
     touch-action: manipulation;
}

#closeSettingsButton:hover {
    opacity: 1;
}


/* Game UI - On-screen elements during gameplay */
#gameUI {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allow clicks to pass through to canvas */
    z-index: 10;
    opacity: 1; /* Initially visible, can be faded out on pause etc. */
    transition: opacity 0.3s ease-out;
    display: none; /* Initially hidden, shown when game starts */
}

#gameUI.show {
    display: block; /* Show when 'show' class is added */
}

/* Score Display */
#scoreDisplay {
    position: absolute;
    top: 20px;
    left: 20px;
    font-size: 1.5em;
    font-weight: bold;
    color: white;
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.7);
}

#scoreLabel {
    opacity: 0.7;
    margin-right: 5px;
}

#scoreValue {
    color: #ffc107; /* Example score color */
}

/* Combo Counter */
#comboDisplay {
    position: absolute;
    bottom: 120px; /* Position above health/ammo */
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    pointer-events: none;
    z-index: 10;
}

#combo {
    font-size: 1.8em;
    font-weight: bold;
    color: #ffc107; /* Amber/Gold color */
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.7);
    opacity: 0; /* Initially hidden */
    transition: opacity 0.2s ease-out, transform 0.3s ease-out;
    transform: translateY(10px);
    margin-bottom: 5px;
}

#comboLabel {
    font-size: 1em;
    opacity: 0.7;
    display: block; /* Ensure label is below value */
    margin-bottom: 2px;
}


/* Ammo Display */
#ammoDisplay {
    position: absolute;
    bottom: 20px;
    right: 20px;
    font-size: 1.2em;
    font-weight: bold;
    color: white;
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.7);
    text-align: right;
}

#ammoLabel {
    opacity: 0.7;
    margin-bottom: 3px;
    display: block;
    text-align: right;
}

#ammoValue {
    color: limegreen; /* Example ammo color */
    font-size: 1.4em;
}
#ammoMaxValue, #totalAmmoValue {
    font-size: 0.9em;
    opacity: 0.6;
    margin-left: 3px;
}


/* Reload Indicator */
#reloadIndicator {
    position: absolute;
    bottom: 50px;
    right: 20px;
    width: 100px;
    height: 8px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    overflow: hidden;
    display: none; /* Hidden by default */
}

.reload-fill {
    height: 100%;
    width: 0%; /* Starts empty */
    background-color: #007bff; /* Example reload color */
    border-radius: 4px;
    transition: width 0.1s linear; /* Quick width change */
}


/* Timer Display */
#timerDisplay {
    position: absolute;
    top: 20px;
    right: 20px;
    font-size: 1.5em;
    font-weight: bold;
    color: white;
    text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.7);
    text-align: right;
}

#timerLabel {
    opacity: 0.7;
    margin-bottom: 5px;
    display: block;
    text-align: right;
}

#timerValue {
    color: #f44336; /* Example timer color */
}


/* Health Bar Styles */
.health-bar {
  position: absolute;
  bottom: 20px;
  left: 20px;
  width: 200px; /* Adjust width */
  height: 20px; /* Adjust height */
  background-color: rgba(0, 0, 0, 0.5); /* Dark background */
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 5px;
  overflow: hidden; /* Keep fill inside */
  pointer-events: none;
  z-index: 5;
}

.health-fill {
  height: 100%;
  width: 100%; /* Start full */
  background-color: limegreen; /* Healthy color */
  border-radius: 4px; /* Slightly smaller radius than container */
  transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out; /* Smooth transitions */
  box-shadow: inset 0 0 5px rgba(0,0,0,0.3); /* Inner shadow effect */
}

#healthValueDisplay {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 0.9em;
    font-weight: bold;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
    white-space: nowrap;
    opacity: 0.8;
}


/* Hit Marker (Centered 'X') */
#hitMarker {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.8); /* Start slightly smaller */
  font-size: 30px; /* Adjust size */
  font-weight: bolder;
  color: rgba(255, 0, 0, 0.9); /* Reddish */
  opacity: 0;
  transition: opacity 0.1s ease-out, transform 0.1s ease-out; /* Animate opacity and scale */
  pointer-events: none;
  z-index: 10;
  text-shadow: 2px 2px 2px rgba(0,0,0,0.8);
}


/* Crosshair (Using your embedded SVG, positioning it) */
#crosshair {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 24px; /* Match SVG size */
  height: 24px;
  transform: translate(-50%, -50%);
  pointer-events: none;
  z-index: 9; /* Below hit marker */
  filter: drop-shadow(1px 1px 1px rgba(0, 0, 0, 0.8)); /* Optional shadow */
  opacity: 0.8; /* Slightly more visible crosshair */
}
#crosshair svg {
    display: block; /* Ensure SVG scales properly */
    width: 100%;
    height: 100%;
}
#crosshair path {
    fill: none; /* No fill */
    stroke: white; /* White crosshair lines */
    stroke-width: 2; /* Adjust line thickness */
    stroke-linecap: round; /* Rounded line ends */
    stroke-linejoin: round; /* Rounded line joins */
}


/* Gun Effects Placeholder (e.g., Muzzle Flash) */
#gunEffects {
    position: absolute;
    top: 50%;
    left: 50%;
    /* Center near crosshair, adjust specific offset in JS if needed */
    transform: translate(-50%, -80%);
    width: 120px; /* Slightly larger effect area */
    height: 120px;
    pointer-events: none;
    z-index: 11; /* Above hit marker? */
    overflow: hidden; /* Clip effects */
}

/* Example Muzzle Flash CSS (make more elaborate) */
.muzzle-flash {
    position: absolute;
    width: 90px;
    height: 90px;
    background: radial-gradient(circle, rgba(255,240,180,0.95) 0%, rgba(255,200,80,0.6) 40%, rgba(255,150,0,0) 70%);
    border-radius: 50%;
    animation: muzzleFlashAnim 0.09s ease-out forwards; /* Slightly faster animation */
    transform: scale(0.3); /* Start smaller */
    opacity: 0.8; /* Start more opaque */
    mix-blend-mode: additive; /* Brighten underlying pixels */
    pointer-events: none;
}

@keyframes muzzleFlashAnim {
    0% { transform: scale(0.6); opacity: 0.9; }
    50% { transform: scale(1.4); opacity: 0.7; }
    100% { transform: scale(1.6); opacity: 0; }
}


/* Mobile Controls Styling */
#mobileControls {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 160px; /* Slightly larger area for controls */
  pointer-events: none; /* Allow touches to pass through container initially */
  z-index: 20;
  display: none; /* Hidden by default, shown if is-mobile */
}

body.is-mobile #mobileControls {
  display: block; /* Show on mobile */
}

#joystick {
  position: absolute;
  bottom: 30px;
  left: 30px;
  width: 110px; /* Slightly larger joystick base */
  height: 110px;
  background-color: rgba(128, 128, 128, 0.35); /* Slightly more opaque */
  border-radius: 50%;
  pointer-events: auto; /* Enable touch on joystick base */
  display: flex;
  justify-content: center;
  align-items: center;
}

#joystick.active {
    background-color: rgba(140, 140, 140, 0.4); /* Slightly different active style */
}

#joystickKnob {
  width: 55px; /* Slightly larger knob */
  height: 55px;
  background-color: rgba(90, 90, 90, 0.8); /* Slightly more opaque knob */
  border-radius: 50%;
  transition: transform 0.05s linear; /* Smooth knob movement visually */
  box-shadow: 0 0 12px rgba(0,0,0,0.6); /* Slightly stronger shadow */
}

#shootButton {
  position: absolute;
  bottom: 40px;
  right: 40px;
  width: 90px; /* Slightly larger button */
  height: 90px;
  background-color: rgba(255, 0, 0, 0.6); /* Reddish */
  color: white;
  border: 2px solid rgba(255,255,255,0.6); /* Slightly brighter border */
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 18px; /* Slightly larger font */
  font-weight: bold;
  text-transform: uppercase;
  pointer-events: auto; /* Enable touch on shoot button */
  cursor: pointer; /* Indicate interactivity */
  transition: background-color 0.1s ease-out, transform 0.1s ease-out, border-color 0.1s ease-out;
  /* Prevent text selection on mobile */
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  /* Improve touch responsiveness */
   touch-action: manipulation;
}

#shootButton:hover {
    background-color: rgba(255, 20, 20, 0.7); /* Slightly brighter hover */
    border-color: rgba(255,255,255,0.7);
}

#shootButton:active, #shootButton.active { /* Style when pressed */
  background-color: rgba(255, 0, 0, 0.9); /* Even brighter active */
  transform: scale(0.96); /* Slight press effect */
  border-color: rgba(255,255,255,0.8); /* Brighter active border */
}


/* Settings Button adjustment from HTML style block (merged here for clarity) */
.settings-btn {
  position: absolute;
  top: 15px;
  left: 15px;
  padding: 8px 15px;
  font-size: 1em;
  background-color: rgba(0, 0, 0, 0.4);
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.2s ease-out, opacity 0.2s ease-out;
  z-index: 50;
  opacity: 0.8;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
   touch-action: manipulation;
}

.settings-btn:hover {
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 1;
}

.settings-btn.hidden {
    opacity: 0;
    pointer-events: none; /* Make it non-interactive when hidden */
}
.settings-btn.disabled {
    opacity: 0.5;
    pointer-events: none; /* Make it non-interactive when disabled */
    cursor: default;
}


/* Damage flash effect */
@keyframes damageFlash {
    from { background-color: rgba(255, 0, 0, 0.3); }
    to { background-color: transparent; } /* Or back to original body background */
}
body.damage-flash-active {
    animation: damageFlash 0.3s ease-out;
}
/* To trigger: document.body.classList.add('damage-flash-active'); */
/* Need JS to remove class after animation completion if using class-based animation */
/* Or use direct style manipulation like in Game.js */
